#include <opencv2/highgui.hpp>
#include <opencv2/opencv.hpp>
#include <vector>
#include <iostream>


using namespace std;
using namespace cv;

int main(int argc, char** argv) {

    bool capturing = true;
    cv::VideoCapture capture(0);
    if (!capture.isOpened()) {
        cerr << "error opening" << endl;
        return -1;
    }

    int lowRanges[3] = { 0, 15, 45 };
    int highRanges[3] = { 30, 125, 255 };

    namedWindow("RangeHSV", WINDOW_AUTOSIZE);
    namedWindow("HSV", WINDOW_AUTOSIZE);
    //odcień oś X
    createTrackbar("Lower Hue", "RangeHSV", &lowRanges[0], 150);
    createTrackbar("Higher Hue", "RangeHSV", &highRanges[0], 150);
    //nasycenie oś Y
    createTrackbar("Lower Sat", "RangeHSV", &lowRanges[1], 255);
    createTrackbar("Higher Sat", "RangeHSV", &highRanges[1], 255);
    //wartość jasności (od najciemniejszego i najjaśniejszego punktu)
    createTrackbar("Lower Val", "RangeHSV", &lowRanges[2], 255);
    createTrackbar("Higher Val", "RangeHSV", &highRanges[2], 255);

    do {
        Mat frame, baseWindow, hsvRange, HSV;
        capture >> frame;
        Mat dst = frame;
        char k = waitKey(1);

        if (capture.read(frame)) {
            if (argc > 1) {
                resize(frame, baseWindow, { atoi(argv[1]), atoi(argv[2]) });
            }
            else {
                resize(frame, baseWindow, { 320, 200 });
            }
            
            GaussianBlur(baseWindow, dst, Size(25, 25), 0);
            imshow("Blurred", dst);
        }
        else {
            capturing = false;
        }
        //wczytywanie formatu koloru red grean blue do HSV
        cvtColor(dst, HSV, COLOR_BGR2HSV);
        cvtColor(HSV, hsvRange, COLOR_BGR2HSV);
        inRange(hsvRange,
            Scalar(lowRanges[0], lowRanges[1], lowRanges[2]),
            Scalar(highRanges[0], highRanges[1], highRanges[2]),
            hsvRange);

        imshow("MyRange", hsvRange);
        imshow("HSV", HSV);

        if (k == 'x') {

            Mat frameROI;
            frameROI = hsvRange.clone();
            auto roi = selectROI("Use ROI on this window", frameROI);
            Mat roiField = frameROI(roi);
            imshow("ROI", roiField);
            imwrite("photo.jpg", roiField);
        }

        if (k == 'q') capturing = false;

    } while (capturing);

    return 0;
}
